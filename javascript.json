{
    /* React Snippets */
    "React - View": {
        "prefix": "jsx-view",
        "body": [
            "import React, {Component} from 'react'",
            "",
            "Class ${1:ViewName} extends Component {",
            "",
            "\tcomponentDidMount() {",
            "\t}",
            "",
            "\trender() {",
            "\t\treturn (",
            "\t\t\t$2",
            "\t\t)",
            "\t}",
            "}",
            "",
            "export default ${1:ViewName}"
        ],
        "description": "Create a react view"
    },
    "React - View with Redux": {
        "prefix": "jsx-reduxview",
        "body": [
            "import React, {Component} from 'react'",
            "import { connect } from 'react-redux'",
            "",
            "class ${1:ViewName} extends Component {",
            "",
            "\trender() {",
            "\t\treturn (",
            "\t\t\t<div>$2</div>",
            "\t\t)",
            "\t}",
            "}",
            "",
            "const mapStateToProps = (state) => ({",
            "})",
            "",
            "const mapDispatchToProps = (dispatch) => ({",
            "})",
            "",
            "export default connect(mapStateToProps, mapDispatchToProps)(${1:ViewName})"
        ],
        "description": "Create a react view which supports redux"
    },
    "React - Component": {
        "prefix": "jsx-component",
        "body": [
            "import React from 'react'",
            "import PropTypes from 'prop-types'",
            "",
            "const ${1:ComponentName} = ({ ${2:props} }) => (",
            "\t$3",
            ")",
            "",
            "${1:ComponentName}.propTypes = {",
            "}",
            "",
            "${1:ComponentName}.defaultProps = {",
            "}",
            "",
            "export default ${1:ComponentName}"
        ],
        "description": "Create a react component"
    },
    "React - Component with redux form": {
        "prefix": "jsx-compreduxform",
        "body": [
            "import React from 'react'",
            "import { Field, reduxForm, Form } from 'redux-form'",
            "import PropTypes from 'prop-types'",
            "",
            "const ${1:ComponentName} = ({ handleSubmit, ${2:handle} }) => (",
            "\t<Form onSubmit={handleSubmit($2)}>",
            "\t\t$4",
            "\t</Form>",
            ")",
            "",
            "$1.propTypes = {",
            "}",
            "",
            "$1.defaultProps = {",
            "}",
            "",
            "export default reduxForm({",
            "\tform: 'initialize$1'",
            "})($1)"
        ],
    },
    "React - Props": {
        "prefix": "props",
        "body": "this.props",
        "description": "this.props"
    },
    "React - State": {
        "prefix": "state",
        "body": "this.state",
        "description": "this.state"
    },
    "React - Set State Object": {
        "prefix": "jsx-setstateobj",
        "body": "this.setState({ ${1:object} })",
        "description": "Set state with object"
    },
    "React - Set State Function": {
        "prefix": "jsx-setstatefunc",
        "body": "this.setState(({ ${1:prev} }) => {$2})",
        "description": "Set state with function"
    },
    "React - Create a route": {
        "prefix": "jsx-route",
        "body": "<Route path=\"${1:url}\" component={${2:component}} />",
        "description": "Create a tag route"
    },
    /* Redux Snippets */
    "Redux - Type": {
        "prefix": "rx-type",
        "body": "export const ${1:typeName} = '${1:typeName}'",
        "description": "Redux Dispatch"
    },
    "Redux - Action": {
        "prefix": "rx-action",
        "body": [
            "const ${1:actionName} = (${2:param}) => ({",
            "\ttype: ${3:type},",
            "\t${2:param}",
            "})",
            ""
        ],
        "description": "Create a redux action"
    },
    "Redux - Reducer": {
        "prefix": "rx-reducer",
        "body": [
            "const ${1:reducerName} = (state = ${2:initialState}, action) => {",
            "\t",
            "\tswitch (action.type) {",
            "\t\tdefault:",
            "\t\t\treturn state",
            "\t}",
            "\t",
            "}",
            "",
            "export default ${1:reducerName}"
        ]
    },
    "Redux - Map Dispatch": {
        "prefix": "rx-mapdisp",
        "body": "${1:funcName}: ($2) => dispatch(${3:action})",
        "description": "Create function in mapDispatchToProps"
    },
    "Redux - Action fetch": {
        "prefix": "rx-fetchaction",
        "body": [
            "export const ${1:funcName} = ($2) => (dispatch) => {",
            "",
            "\t${3:method}.then(($4) => {",
            "\t\t$0",
            "\t}).catch(() => {})",
            "",
            "}",
            ""
        ]
    },
    "Redux - Dispatch": {
        "prefix": "disp",
        "body": "dispatch($1)",
        "description": "Redux Dispatch"
    },
    /* Redux Form */
    "Redux - Form Field": {
        "prefix": "rx-field",
        "body": [
            "<Field",
            "\tname=\"${1:name}\"",
            "\tcomponent=\"input\"",
            "\ttype=\"${2:text}\"",
            "/>"
        ],
        "description": "Create a Field tag for redux form"
    },
    /* Javascript ES6 Snippets */
    "Arrow Function": {
        "prefix": "js-arrow",
        "body": "${1:funcName} = (${2}) => {$3}",
        "description": "Create an arrow function"
    },
    "Arrow Function Const": {
        "prefix": "js-arrowconst",
        "body": "const ${1:funcName} = (${2}) => {$3}",
        "description": "Create an immutable arrow function"
    },
    "Import Module (all)": {
        "prefix": "importall",
        "body": "import ${1:module} from '${2:pathModule}'",
        "description": "Import all content of a module"
    },
    "Import Module (single)": {
        "prefix": "importsingle",
        "body": "import { ${1:module} } from '${2:pathModule}'",
        "description": "Import a single member of a module"
    },
    "Map - Funcional Programming": {
        "prefix": "js-map",
        "body": [
            "${1:array}.map((${2:item}) => $3)"
        ],
        "description": "Create a map functional programming"
    },
    "Filter - Funcional Programming": {
        "prefix": "js-filter",
        "body": "${1:array}.filter((${2:item}) => $3)",
        "description": "Create a filter functional programming"
    },
    "Destruct Object": {
        "prefix": "js-descobj",
        "body": [
            "const { ${1:item} } = ${2:object}"
        ],
        "description": "Destructing object syntax"
    },
    "Promisse - Then, Catch": {
        "prefix": "js-prothen",
        "body": [
            "${1:obj}.then((${2:value}) => {",
            "\t$3",
            "}).catch(() => {})"
        ],
        "description": "Promisse - then, catch structure"
    },
    /* Javascript ES5 Snippets */
	"Old JS Function": {
		"prefix": "ojs-func",
		"body": "function ${1:funcName}($2) {$3}",
		"description": "Create a function (ES5)"
    },
    /* Javascript ES5, ES6 Snippets */
    "Console": {
        "prefix": "con",
        "body": "console.log($1)$0",
        "description": "Create a function (ES5)"
    }
}